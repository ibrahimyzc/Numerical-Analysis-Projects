int n=40;
mesh Th=square(n,n);
fespace Vh(Th,RT0);
fespace Ph(Th,P0);

real alpha = 1;
func gd = x^3 + y^3;
func exact = x^3 + y^3;
func ur1=-3*(x^2);
func ur2=-3*(y^2);
func uxx=-6*x;
func uyy=-6*y;
func f = x^3 + y^3-(6*x+6*y);
func K=1;

Vh [u1,u2],[v1,v2];
Ph p,w,err; 

problem hwp1([u1,u2,p],[v1,v2,w],solver=LU,eps=-1.0e-6) =
   int2d(Th)( p*w*1e-15+ (1/K)*u1*v1 + (1/K)*u2*v2 - p*(dx(v1)+dy(v2)))
 + int2d(Th) ((alpha*p*w)+(dx(u1)+dy(u2))*w)
 + int1d(Th)( gd*(v1*N.x +v2*N.y))
 - int2d(Th)(f*w);

 hwp1;
 err = abs(x^3 + y^3 - p);
 plot([u1,u2],coef=0.1,wait=1,ps="lapRTuv.eps",value=true); 
 plot(p,fill=1,wait=1,ps="laRTp.eps",value=true);
 plot(err,fill=1,wait=1,ps="laRTp.eps",value=true);

 real errorppp = sqrt(int2d(Th)((exact-p)^2));
 real erroruuu = sqrt(int2d(Th)((ur1-u1)^2+(ur2-u2)^2));
 real errordiv = sqrt(int2d(Th)((uxx+uyy-dx(u1)-dy(u2))^2));
 cout << "errorppp = " << errorppp << endl;
 cout << "erroruuu = " << erroruuu << endl;
 cout << "errordiv = " << errordiv << endl;
